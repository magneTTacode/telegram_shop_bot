from aiogram import F, Router, types
from aiogram import Bot
import aiogram.utils
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import io
from aiogram.types import InputFile
import uuid
import mysql.connector
import config
import pandas as pd
from aiogram.types import FSInputFile
from datetime import datetime

import kb
import text
import db
import config

bot = Bot(token=config.BOT_TOKEN)

async def send_menu_by_role(user_id: int):
    role = db.get_user_role(user_id)
    if role == 1:
        await send_user_menu(user_id)
    elif role == 2:
        await send_agent_menu(user_id)
    elif role == 3:
        await send_admin_menu(user_id)
    elif role == 4:
        await send_main_menu(user_id)
    else:
        print(f"Unknown role for user {user_id}")

async def send_main_menu(user_id):
    await bot.send_message(user_id, '–ü–∞–Ω–µ–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=kb.main_admin_kb)

async def send_user_menu(user_id: int):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(user_id, "–ú–µ–Ω—é", reply_markup=kb.user_keyboard)

async def send_agent_menu(user_id: int):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    await bot.send_message(user_id, "–ú–µ–Ω—é", reply_markup=kb.agent_keyboard)

async def send_admin_menu(user_id: int):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    await bot.send_message(user_id, "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", kb.admin_kb)

db_config = {
    'host': 'localhost',
    'user': 'admin',
    'password': 'wFaEPSogZvh94bfu',
    'database': "tgbot"
}

async def send_user_profile(user_id):
    try:
        # Connect to the database
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor(dictionary=True)

        # Fetch balance and subscription_end from profiles for the given user_id
        cursor.execute("SELECT balance, subscription_end FROM profiles WHERE user_id = %s", (user_id,))
        profile_data = cursor.fetchone()

        if profile_data:
            # Format message text in Russian
            if profile_data['subscription_end']:
                subscription_status = f"‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {profile_data['subscription_end'].strftime('%d.%m.%Y')}"
            else:
                subscription_status = "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"

            message_text = f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            message_text += subscription_status + "\n"
            message_text += f"üí∞ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {profile_data['balance']}"

            # Send message with keyboard
            await bot.send_message(user_id, message_text, reply_markup=kb.profile_keyboard)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å user_id={user_id}")
            return True
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return False

    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        return False

    finally:
        # Close database connection
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def send_category_message(chat_id):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute("SELECT name FROM categories")
        categories = cursor.fetchall()
        buttons = [
    [KeyboardButton(text="–æ–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é")],  # First row with a single button
]
        clean_categories = [category[0] for category in categories]
        for c in clean_categories:
            buttons.append([KeyboardButton(text=c)])  # Wrap each button in a list

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, keyboard=buttons)  


        await bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)

    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")

    finally:
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def send_first_product_with_image(chat_id: int, data, state):
    category_name = data['category']
    num = data['num']
    products = db.get_products_by_category(category_name)
    
    if len(products) == 0:
        await bot.send_message(chat_id=chat_id, text='–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞.')
        await state.clear()
        await send_menu_by_role(chat_id)
    else:

        product = products[num]
        await state.update_data(prod_id = product[0])
        image_file = product[8]

        # image_file = 'AgACAgIAAxkBAAILQGZ-n6vA0xgSOryC1748uDnHX1u_AAIN3jEbGK74S2oJkdjpCZtCAQADAgADeAADNQQ'
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if num == 0:
            if len(products) == 1:
                keyboard = kb.shop_kb_4
            else:
                keyboard = kb.shop_kb_1
        elif num+1 == len(products):
            if len(products) == 1:
                keyboard = kb.shop_kb_4
            else:
                keyboard = kb.shop_kb_3
        else:
            keyboard = kb.shop_kb_2
        if product[6] == 1:
            prod_6 = '–≤ –Ω–∞–ª–∏—á–∏–∏'
        else:
            prod_6 = '–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'
        await bot.send_photo(chat_id, image_file, caption=f"{product[2]}\n\n"
                                                            f"–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: {product[3]}\n\n"
                                                            f"–û–ø–∏—Å–∞–Ω–∏–µ: {product[4]}\n\n"
                                                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {product[5]}, {prod_6}\n"
                                                            f"–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {product[7]}\n\n"
                                                            f"{num+1} –∏–∑ {len(products)}", reply_markup=keyboard)
    
async def update_data_num(inf, state):
    data = await state.get_data()
    if inf == 'next_prod':
        data1 = data['num']
        data1 += 1
        await state.update_data(num = data1)
    elif inf == 'prev_prod':
        data1 = data['num']
        data1 -= 1
        await state.update_data(num = data1)
    elif inf == 'next_rev':
        data1 = data['rev_num']
        data1 += 1
        await state.update_data(rev_num = data1)
    elif inf == 'prev_rev':
        data1 = data['rev_num']
        data1 -= 1
        await state.update_data(rev_num = data1)

async def review_opt(chat_id, state):
    data = await state.get_data()
    review = data['review']
    await bot.send_message(chat_id=chat_id, text=f'–í–∞—à –æ—Ç–∑—ã–≤:\n\n{review}', reply_markup=kb.rev_kb_wr_2)

async def add_review(state):
    data = await state.get_data()
    username = data['username']
    user_id = data['user_id']
    review_text = data['review']
    positive = data['positive']
    product_id = data['prod_id']
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        
        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        query = """
        INSERT INTO reviews (username, user_id, review_text, positive, product_id)
        VALUES (%s, %s, %s, %s, %s)
        """
        values = (username, user_id, review_text, positive, product_id)
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        cursor.execute(query, values)
        conn.commit()
        print("–û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        await bot.send_message(chat_id=user_id, text='–û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.')
        
    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        await bot.send_message(chat_id=user_id, text='–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.')
    
    finally:
        if cursor:
            cursor.close()
        if conn and conn.is_connected():
            conn.close()
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def send_first_review(chat_id: int, state):
    data = await state.get_data()
    product_id = data['prod_id']
    rev_num = data['rev_num']

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –ø–æ product_id
        query = "SELECT * FROM reviews WHERE product_id = %s"
        cursor.execute(query, (product_id,))
        reviews = cursor.fetchall()

        if rev_num == 0:
            if len(reviews) == 1:
                keyboard = kb.rev_kb_4
            else:
                keyboard = kb.rev_kb_1
        elif rev_num+1 == len(reviews):
            if len(reviews) == 1:
                keyboard = kb.rev_kb_4
            else:
                keyboard = kb.rev_kb_3
        else:
            keyboard = kb.rev_kb_2
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–∑—ã–≤—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π
        if reviews:
            first_review = reviews[rev_num]
            review_text = (f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_review[1]}\n"
                           f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {first_review[2]}\n"
                           f"–û—Ç–∑—ã–≤: {first_review[3]}\n"
                           f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π: {'–î–∞' if first_review[4] else '–ù–µ—Ç'}\n"
                           f"ID –ø—Ä–æ–¥—É–∫—Ç–∞: {first_review[5]}")
            review_text = (f"{'–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π' if first_review[4] else '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π'} –æ—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {first_review[1]}\n\n"
                           f"{first_review[3]}\n\n"
                           f"{rev_num+1} –∏–∑ {len(reviews)}")
            await bot.send_message(chat_id=chat_id, text=review_text, reply_markup=keyboard)
        else:
            await bot.send_message(chat_id=chat_id, text="–û—Ç–∑—ã–≤–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç.")
    
    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
    
    finally:
        if cursor:
            cursor.close()
        if conn and conn.is_connected():
            conn.close()
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def add_admin(chat_id, state):
    data = await state.get_data()
    username = data['name']
    role = data['role']
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # –ü–æ–∏—Å–∫ user_id –ø–æ username
        cursor.execute("SELECT chat_id FROM users WHERE username = %s", (username,))
        user_id = cursor.fetchone()

        if user_id is None:
            await bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = user_id[0]

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        query = "INSERT INTO admin (user_id, role) VALUES (%s, %s)"
        values = (user_id, role)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        cursor.execute(query, values)
        conn.commit()

        await bot.send_message(chat_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

    except:
        await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    finally:
        if cursor is not None:
            cursor.close()
        if conn is not None and conn.is_connected():
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def delete_admin(chat_id, state):
    data = await state.get_data()
    username = data['name']
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # –ü–æ–∏—Å–∫ user_id –ø–æ username
        cursor.execute("SELECT chat_id FROM users WHERE username = %s", (username,))
        user_id = cursor.fetchone()

        if user_id is None:
            await bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user_id = user_id[0]

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        query = "DELETE FROM admin WHERE user_id = %s"
        values = (user_id,)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        cursor.execute(query, values)
        conn.commit()

        if cursor.rowcount > 0:
            await bot.send_message(chat_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        else:
            await bot.send_message(chat_id, f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –Ω–∏–∫–æ–º {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except:
        await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

    finally:
        if cursor is not None:
            cursor.close()
        if conn is not None and conn.is_connected():
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

def generate_invite_code():
    return str(uuid.uuid4())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
async def create_invite_link(state, chat_id):
    data = await state.get_data()
    user_name = data['name']
    user_id = get_user_id_by_username(user_name)
    invite_code = generate_invite_code()
    # invite_link = f"https://t.me/dark_c0d3_bot?start={invite_code}"
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ agents
        query = "INSERT INTO agents (user_id, invite_code, invited_users, earnings) VALUES (%s, %s, %s, %s)"
        cursor.execute(query, (user_id, invite_code, 0, 0.00))
        conn.commit()
        await bot.send_message(chat_id, text='–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.')
        
    except mysql.connector.Error as err:
        await bot.send_message(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        return None
    
    finally:
        if cursor is not None:
            cursor.close()
        if conn is not None and conn.is_connected():
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")
    
    # return invite_link

def get_user_id_by_username(username):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user_id –ø–æ –Ω–∏–∫—É
        query = "SELECT chat_id FROM users WHERE username = %s"
        cursor.execute(query, (username,))
        result = cursor.fetchone()
        
        if result:
            return result[0]
        else:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return None
        
    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}")
        return None
    
    finally:
        if cursor is not None:
            cursor.close()
        if conn is not None and conn.is_connected():
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def save_invited_user_by_invite_code(state, invited_user_id):
    data = await state.get_data()
    invite_code = data['invite_code']
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # –ù–∞–π—Ç–∏ user_id –∞–≥–µ–Ω—Ç–∞ –ø–æ invite_code
        query = "SELECT user_id FROM agents WHERE invite_code = %s"
        cursor.execute(query, (invite_code,))
        result = cursor.fetchone()

        if result:
            user_id = result[0]

            # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É invited_users
            insert_query = "INSERT INTO invited_users (user_id, invited_user_id) VALUES (%s, %s)"
            cursor.execute(insert_query, (user_id, invited_user_id))
            conn.commit()

            await bot.send_message(user_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {invited_user_id} –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–ª –∞–≥–µ–Ω—Ç–æ–º {user_id}.")
        else:
            await bot.send_message(invited_user_id, f"–ò–Ω–≤–∞–π—Ç-–∫–æ–¥ {invite_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except mysql.connector.Error as err:
        print(f"Database error: {err}")

    finally:
        if cursor is not None:
            cursor.close()
        if conn is not None and conn.is_connected():
            conn.close()
            print("Database connection closed.")

async def delete_agent_by_username(state, chat_id):
    data = await state.get_data()
    username = data['name']
    user_id = get_user_id_by_username(username)
    if not user_id:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # –£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ user_id
        cursor.execute("DELETE FROM agents WHERE user_id = %s", (user_id,))
        conn.commit()

        if cursor.rowcount > 0:
            await bot.send_message(chat_id, f"–ê–≥–µ–Ω—Ç —Å user_id {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            await bot.send_message(chat_id, f"–ê–≥–µ–Ω—Ç —Å user_id {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ agents.")

    except mysql.connector.Error as err:
        await bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def add_category(state, user_id):
    data = await state.get_data()
    name = data['name']
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        query = "INSERT INTO categories (name) VALUES (%s)"
        cursor.execute(query, (name,))

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        conn.commit()
        await bot.send_message(user_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except:
        await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn.is_connected():
            cursor.close()
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def delete_category(state, user_id):
    data = await state.get_data()
    name = data['name']
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        query = "DELETE FROM categories WHERE name = %s"
        cursor.execute(query, (name,))

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        conn.commit()

        if cursor.rowcount > 0:
            await bot.send_message(user_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            await bot.send_message(user_id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    except:
        await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn.is_connected():
            cursor.close()
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def add_product(state, user_id):
    data = await state.get_data()
    name = data['product_name']
    price = data['price']
    category = data['category']
    characteristics = data['characteristics']
    description = data['description']
    availability = 1
    delivery_time = data['delivery_time']
    photo_data = data['photo_data']
    image_data = photo_data.file_id

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞
        add_product_query = """
            INSERT INTO products (category, name, characteristics, description, price, availability, delivery_time, image_data)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        """
        product_data = (category, name, characteristics, description, price, availability, delivery_time, image_data)

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        cursor.execute(add_product_query, product_data)
        conn.commit()

        await bot.send_message(user_id, "–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")

    except mysql.connector.Error as err:
        await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn.is_connected():
            cursor.close()
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def delete_product_by_category_and_name(state, user_id):
    data = await state.get_data()
    category = data['category']
    product_name = data['product_name']
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        delete_product_query = "DELETE FROM products WHERE category = %s AND name = %s"
        cursor.execute(delete_product_query, (category, product_name))

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        conn.commit()

        if cursor.rowcount > 0:
            await bot.send_message(user_id, f"–ü—Ä–æ–¥—É–∫—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '{category}' –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{product_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            await bot.send_message(user_id, f"–ü—Ä–æ–¥—É–∫—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π '{category}' –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except mysql.connector.Error as err:
        await bot.send_message(user_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn.is_connected():
            cursor.close()
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def send_message_to_all_users(state):
    data = await state.get_data()
    message_text = data['text']
    photo_data = data['photo_data']
    image_data = photo_data.file_id
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö chat_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
        cursor.execute("SELECT chat_id FROM users")
        chat_ids = cursor.fetchall()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É chat_id
        for chat_id in chat_ids:
            await bot.send_photo(chat_id=chat_id[0], photo=image_data, caption=message_text)

    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def export_users_balance_to_excel_and_send(chat_id):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        query = """
            SELECT u.id AS ID, u.username AS Username, p.balance AS Balance
            FROM users u
            LEFT JOIN profiles p ON u.id = p.user_id
        """

        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Pandas
        df = pd.read_sql(query, conn)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ –¥–ª—è Excel —Ñ–∞–π–ª–∞
        excel_filename = 'users_balance.xlsx'

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ DataFrame –≤ Excel
        df.to_excel(excel_filename, index=False)
        document = FSInputFile(excel_filename)

        await bot.send_document(chat_id, document)

        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω Excel —Ñ–∞–π–ª —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")

    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if 'conn' in locals() and conn.is_connected():
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

# invite_link = f"https://t.me/dark_c0d3_bot?start={invite_code}"

async def send_agent_info(user_id):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞ –ø–æ user_id
        query = """
            SELECT invite_code, invited_users, earnings
            FROM agents
            WHERE user_id = %s
        """
        cursor.execute(query, (user_id,))
        result = cursor.fetchone()

        if result:
            invite_code, invited_users, earnings = result

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = (
                f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞:\n\n"
                f"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/dark_c0d3_bot?start={invite_code}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {invited_users}\n"
                f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏: {earnings} USDT."
            )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(chat_id=user_id, text=message_text, reply_markup=kb.agent_kb)
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id –Ω–µ—Ç
            await bot.send_message(chat_id=user_id, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å –∫–∞–∫ –æ–± –∞–≥–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def create_invite_link_group(group_id):
    invite_link = await bot.create_chat_invite_link(chat_id=group_id, expire_date=None, member_limit=1)
    return invite_link.invite_link

async def check_subscription_and_invite(user_id):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
        query = """
            SELECT subscription_end
            FROM profiles
            WHERE user_id = %s
        """
        cursor.execute(query, (user_id,))
        result = cursor.fetchone()

        if result:
            subscription_end = result[0]
            current_date = datetime.now().date()

            if subscription_end and subscription_end > current_date:
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                invite_link = await create_invite_link_group(-4208340770)
                await bot.send_message(chat_id=user_id, text=f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –≥—Ä—É–ø–ø–µ –ø–æ —Å—Å—ã–ª–∫–µ: {invite_link}")
            else:
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(chat_id=user_id, text="–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
        else:
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id –Ω–µ—Ç
            await bot.send_message(chat_id=user_id, text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

async def check_balance_send_message_and_reset(user_id: int, cash, name):
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = "SELECT earnings FROM agents WHERE user_id = %s"
        cursor.execute(query, (user_id,))
        result = cursor.fetchone()

        if result:
            balance = result[0]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if balance >= 10:
                message = "–£ –≤–∞—Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –æ–±–Ω—É–ª–µ–Ω."
                # –û–±–Ω—É–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                update_query = "UPDATE agents SET earnings = 0 WHERE user_id = %s"
                cursor.execute(update_query, (user_id,))
                conn.commit()
                await bot.send_message(chat_id=-4208340770, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{name} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {balance}USDT –Ω–∞ –∫–æ—à–µ–ª—ë–∫ {cash}")
            else:
                message = "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ."

            await bot.send_message(user_id, message)

        else:
            await bot.send_message(user_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except mysql.connector.Error as err:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {err}")

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if 'conn' in locals() and conn.is_connected():
            cursor.close()
            conn.close()
            print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")
